#!/bin/bash

set -e -o pipefail

# Smaller for testing ...
export EP_GPG_KEY_LENGTH=2048
export EP_RSA_KEY_LENGTH=2048
export EP_SSH_KEY_LENGTH=2048

log "Installing test-prerequisits ..."
#docker-apt gnupg openssh-client
docker-apt openssh-client

log "Checking docker-apt-install ..."
for i in apt-transport-https ca-certificates curl gettext pwgen wget vim ; do
	log "	${i}"
	dpkg-query -W --showformat='${Status}\n' $i | grep "install ok installed" > /dev/null
done

log "Checking docker-apt-clean ..."
for i in /tmp /usr/share/{info,lintian,man} /var/lib/apt/lists /var/tmp ; do
	log "	${i}"
	[[ ! "$(ls --almost-all ${i})" ]]
done

#log "Checking entrypoint::generate_gpgkey ..."
#generate_gpgkey "mysecretname" "myrealname" "myemail"
#gpg --list-keys | grep "mysecretname"
#gpg --list-keys | grep "myrealname"
#gpg --list-keys | grep "myemail"

log "Checking entrypoint::generate_password ..."
log "	environment"
export TEST1_PASSWORD=test1
generate_password test1
[[ -s "${EP_SECRETS_ROOT}/test1_password" ]] && grep --quiet test1 "${EP_SECRETS_ROOT}/test1_password"

log "	generated"
generate_password test2
[[ -s "${EP_SECRETS_ROOT}/test2_password" ]] && [[ ${#TEST2_PASSWORD} -eq ${EP_PWGEN_LENGTH} ]]

log "	secrets"
echo test3 > "${EP_SECRETS_ROOT}/test3_password"
generate_password test3
[[ -s "${EP_SECRETS_ROOT}/test3_password" ]] && grep --quiet test3 "${EP_SECRETS_ROOT}/test3_password"

log "Checking entrypoint::generate_rsakey ..."
prefix1="mYpReFiX"
prefix2="prefix 2"
prefix3="prefix3"
cn="My custom CN"
generate_rsakey "${prefix1}"
generate_rsakey "${prefix2}" "${cn}"
subject_alt_name="www.www.com"
echo "subjectAltName=DNS:${subject_alt_name}" > "/dev/shm/${prefix3}.ext"
generate_rsakey "${prefix3}"
for prefix in "${prefix1}" "${prefix2}" "${prefix3}"; do
	[[ -f "${EP_SECRETS_ROOT}/${prefix,,}ca.crt" ]]
	[[ -f "${EP_SECRETS_ROOT}/${prefix,,}.crt" ]]
	[[ -f "${EP_SECRETS_ROOT}/${prefix,,}.key" ]]
done
[[ "$(openssl x509 -in "${EP_SECRETS_ROOT}/${prefix1,,}.crt" -noout -subject)" =~ "${prefix1,,} server" ]]
[[ "$(openssl x509 -ext subjectAltName -in "${EP_SECRETS_ROOT}/${prefix1,,}.crt" -noout )" =~ "localhost" ]]
[[ "$(openssl x509 -in "${EP_SECRETS_ROOT}/${prefix2,,}.crt" -noout -subject)" =~ "${cn}" ]]
[[ "$(openssl x509 -ext subjectAltName -in "${EP_SECRETS_ROOT}/${prefix2,,}.crt" -noout )" =~ "localhost" ]]
[[ "$(openssl x509 -in "${EP_SECRETS_ROOT}/${prefix3,,}.crt" -noout -subject)" =~ "${prefix3,,} server" ]]
[[ "$(openssl x509 -ext subjectAltName -in "${EP_SECRETS_ROOT}/${prefix3,,}.crt" -noout )" =~ "${subject_alt_name}" ]]

log "Checking entrypoint::render_template ..."
template="$(mktemp)"
instantiation="$(mktemp --dry-run)"

cat <<- EOF > "${template}.template"
test1 value here >>> \${TEST1_PASSWORD} <<< test1 value here
test2 value here >>> \${TEST2_PASSWORD} <<< test2 value here
test3 value here >>> \${TEST3_PASSWORD} <<< test3 value here
EOF

render_template "${template}" "${instantiation}"
[[ -f "${instantiation}" ]] && \
	grep "${TEST1_PASSWORD}" "${instantiation}" && \
	grep "${TEST2_PASSWORD}" "${instantiation}" && \
	grep "${TEST3_PASSWORD}" "${instantiation}"

log "Checking entrypoint::generate_sshkey ..."
generate_sshkey "root"
[[ -f "${EP_SECRETS_ROOT}/id_rsa.root" ]]
[[ -s /root/.ssh/id_rsa ]]
useradd user1
generate_sshkey "user1"
[[ -f "${EP_SECRETS_ROOT}/id_rsa.user1" ]]
[[ -s /home/user1/.ssh/id_rsa ]]

log "--- Test Passed ---"
exit 0

